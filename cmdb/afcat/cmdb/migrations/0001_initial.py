# -*- coding: utf-8 -*-
# Generated by Django 1.10.1 on 2016-12-15 09:25
from __future__ import unicode_literals

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AssetHistory',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('model_name', models.CharField(max_length=100)),
                ('data', models.TextField(null=True)),
                ('op_date', models.DateTimeField(auto_now=True)),
                ('op_user', models.CharField(max_length=50, null=True)),
            ],
            options={
                'permissions': (('view_assethistory', 'can view AssetHistory Record'),),
            },
        ),
        migrations.CreateModel(
            name='Assets',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('assetno', models.CharField(max_length=50, unique=True)),
                ('sn', models.CharField(max_length=100, null=True, verbose_name='SN')),
                ('model', models.CharField(max_length=100, null=True, verbose_name='型号')),
                ('unitinfo', models.CharField(max_length=100, null=True, verbose_name='单元信息')),
                ('cpu', models.CharField(max_length=100, null=True, verbose_name='CPU')),
                ('memory', models.CharField(max_length=100, null=True, verbose_name='内存')),
                ('manageip', models.GenericIPAddressField(null=True, verbose_name='管理IP')),
                ('clusterinfo', models.CharField(max_length=200, null=True, verbose_name='集群信息')),
                ('tradedate', models.DateField(blank=True, null=True, verbose_name='购买日期')),
                ('startdate', models.DateField(blank=True, null=True, verbose_name='开始保修期')),
                ('expiredate', models.DateField(blank=True, null=True, verbose_name='过保日期')),
                ('contact', models.CharField(max_length=200, null=True, verbose_name='硬件负责人')),
                ('createuser', models.CharField(max_length=100, null=True, verbose_name='创建人')),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True, verbose_name='最后更新人')),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(blank=True, max_length=200, null=True)),
            ],
            options={
                'ordering': ['-createdate'],
                'permissions': (('view_assets', 'Can View Assets'),),
            },
        ),
        migrations.CreateModel(
            name='BackupRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=200, verbose_name='文件名称')),
                ('backupdate', models.DateTimeField(auto_now=True)),
                ('backupuser', models.CharField(blank=True, max_length=100, null=True)),
                ('remark', models.CharField(blank=True, max_length=300, null=True)),
            ],
            options={
                'ordering': ['-backupdate'],
            },
        ),
        migrations.CreateModel(
            name='BaseAssetCabinet',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('numbers', models.CharField(blank=True, max_length=200, null=True, verbose_name='机柜号')),
                ('slotcount', models.IntegerField(blank=True, null=True, verbose_name='槽位数(U)')),
            ],
            options={
                'verbose_name_plural': '机柜',
                'permissions': (('view_baseassetcabinet', 'can view BaseAssetCabinet'),),
                'ordering': ['room', 'numbers', 'slotcount'],
                'verbose_name': '机柜',
            },
        ),
        migrations.CreateModel(
            name='BaseAssetStatus',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=100, verbose_name='状态')),
                ('flag', models.IntegerField(default=0, verbose_name='销毁状态')),
            ],
            options={
                'verbose_name_plural': '设备状态',
                'permissions': (('view_baseassetstatus', 'can view BaseAssetStatus'),),
                'ordering': ['status', '-id'],
                'verbose_name': '设备状态',
            },
        ),
        migrations.CreateModel(
            name='BaseAssetSubtype',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='主机类型')),
            ],
            options={
                'verbose_name_plural': '服务器分类',
                'permissions': (('view_baseassetsubtype', 'can view BaseAssetSubtype'),),
                'ordering': ['-type', 'name'],
                'verbose_name': '服务器分类',
            },
        ),
        migrations.CreateModel(
            name='BaseAssetType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='类型名称')),
                ('flag', models.IntegerField(choices=[(1, '是'), (0, '否')], default=0, verbose_name='是否虚机')),
            ],
            options={
                'verbose_name_plural': '服务器用途',
                'permissions': (('view_baseassettype', 'can view BaseAssetType'),),
                'ordering': ['name', 'flag'],
                'verbose_name': '服务器用途',
            },
        ),
        migrations.CreateModel(
            name='BaseBalanceType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('typename', models.CharField(blank=True, max_length=200, null=True, verbose_name='策略')),
            ],
            options={
                'verbose_name_plural': 'F5负载策略',
                'permissions': (('view balancetype', 'can view BalanceType'),),
                'ordering': ['id'],
                'verbose_name': 'F5负载策略',
            },
        ),
        migrations.CreateModel(
            name='BaseCompany',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='公司名称')),
            ],
            options={
                'verbose_name_plural': '公司基表',
                'permissions': (('view_basecompany', 'can view BaseCompany'),),
                'ordering': ['-name'],
                'verbose_name': '公司基表',
            },
        ),
        migrations.CreateModel(
            name='BaseCustomerInfo',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('idcode', models.IntegerField(unique=True)),
                ('custalias', models.CharField(max_length=100, verbose_name='客户简称')),
                ('custname', models.CharField(max_length=200, null=True, verbose_name='客户名称')),
                ('custCode', models.CharField(max_length=200, null=True, verbose_name='客户编号')),
            ],
            options={
                'verbose_name_plural': '客户信息表',
                'permissions': (('view_basecustomerinfo', 'can view BaseCustomerInfo'),),
                'ordering': ['-idcode'],
                'verbose_name': '客户信息表',
            },
        ),
        migrations.CreateModel(
            name='BaseDataCenter',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='数据中心')),
            ],
            options={
                'verbose_name_plural': '数据中心',
                'permissions': (('view_basedatacenter', 'can view BaseDataCenter'),),
                'ordering': ['name'],
                'verbose_name': '数据中心',
            },
        ),
        migrations.CreateModel(
            name='BaseDepartment',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='my_department', to='cmdb.BaseCompany', verbose_name='公司名称')),
                ('top_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='topdepart', to='cmdb.BaseDepartment')),
                ('up_department', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='updepart', to='cmdb.BaseDepartment')),
            ],
            options={
                'verbose_name_plural': '部门基表',
                'permissions': (('view_basedepartment', 'can view BaseDepartment'),),
                'ordering': ['-id'],
                'verbose_name': '部门基表',
            },
        ),
        migrations.CreateModel(
            name='BaseEquipmentType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, null=True, verbose_name='类型名称')),
            ],
            options={
                'verbose_name_plural': '网络设备类型',
                'permissions': (('view_baseequipmenttype', 'Can View BaseEquipmentType'),),
                'ordering': ['name'],
                'verbose_name': '网络设备类型',
            },
        ),
        migrations.CreateModel(
            name='BaseFactory',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=200, verbose_name='厂商')),
                ('contact', models.CharField(blank=True, max_length=100, null=True, verbose_name='联系方式')),
            ],
            options={
                'verbose_name_plural': '设备厂商',
                'permissions': (('view_basefactory', 'can view BaseFactory'),),
                'ordering': ['name', 'contact'],
                'verbose_name': '设备厂商',
            },
        ),
        migrations.CreateModel(
            name='BaseMachineRoom',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='机房名称')),
                ('address', models.CharField(blank=True, max_length=200, null=True, verbose_name='机房地址')),
                ('center', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_rooms', to='cmdb.BaseDataCenter', verbose_name='所属中心')),
            ],
            options={
                'verbose_name_plural': '机房',
                'permissions': (('view_basemachineroom', 'can view BaseMachineRoom'),),
                'ordering': ['center', 'name', 'address'],
                'verbose_name': '机房',
            },
        ),
        migrations.CreateModel(
            name='BaseNetArea',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='区域名称')),
            ],
            options={
                'verbose_name_plural': '网络区域',
                'permissions': (('view_basenetarea', 'can view BaseNetArea'),),
                'ordering': ['name', '-id'],
                'verbose_name': '网络区域',
            },
        ),
        migrations.CreateModel(
            name='BaseRaidType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('typename', models.CharField(max_length=50, verbose_name='RAID')),
            ],
            options={
                'verbose_name_plural': 'RAID类型',
                'permissions': (('view_baseraidtype', 'can view BaseRaidType'),),
                'ordering': ['typename'],
                'verbose_name': 'RAID类型',
            },
        ),
        migrations.CreateModel(
            name='BaseRole',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('role_name', models.CharField(max_length=100, verbose_name='角色名称')),
            ],
            options={
                'verbose_name_plural': '角色表',
                'permissions': (('view_baserole', 'can view BaseRole'),),
                'ordering': ['-role_name'],
                'verbose_name': '角色表',
            },
        ),
        migrations.CreateModel(
            name='BaseRunningStatus',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('status', models.CharField(max_length=100, verbose_name='状态')),
            ],
            options={
                'verbose_name_plural': '运行状态',
                'permissions': (('view baserunningstatus', 'can view RunningStatus'),),
                'ordering': ['-id'],
                'verbose_name': '运行状态',
            },
        ),
        migrations.CreateModel(
            name='BaseSoft',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='软件名称')),
                ('version', models.CharField(blank=True, max_length=50, null=True, verbose_name='版本')),
            ],
            options={
                'verbose_name_plural': '软件列表',
                'permissions': (('view_basesoft', 'can view BaseSoft'),),
                'ordering': ['name', 'type', 'version'],
                'verbose_name': '软件列表',
            },
        ),
        migrations.CreateModel(
            name='BaseSoftType',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='软件类型')),
            ],
            options={
                'verbose_name_plural': '软件分类',
                'permissions': (('view_basesofttype', 'can view BaseSoftType'),),
                'ordering': ['name', '-id'],
                'verbose_name': '软件分类',
            },
        ),
        migrations.CreateModel(
            name='Business',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('bussname', models.CharField(max_length=200, verbose_name='模块名称')),
            ],
            options={
                'verbose_name_plural': '业务模块',
                'permissions': (('view_business', 'Can View Business'),),
                'ordering': ['bussname', 'project'],
                'verbose_name': '业务模块',
            },
        ),
        migrations.CreateModel(
            name='CpuMemory',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('model', models.CharField(max_length=50, null=True)),
                ('cpucount', models.CharField(max_length=10, null=True)),
                ('corecount', models.CharField(max_length=10, null=True)),
                ('frequency', models.CharField(max_length=50, null=True)),
                ('memory', models.IntegerField(null=True)),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('assetno', models.CharField(max_length=100)),
                ('sn', models.CharField(max_length=100, null=True)),
                ('assetname', models.CharField(max_length=200, null=True)),
                ('tradedate', models.DateField(null=True)),
                ('expiredate', models.DateField(null=True)),
                ('model', models.CharField(max_length=100, null=True)),
                ('manageip', models.GenericIPAddressField(null=True)),
                ('portcount', models.IntegerField(null=True)),
                ('slotindex', models.CharField(max_length=100, null=True)),
                ('powertype', models.CharField(max_length=100, null=True, verbose_name='电源数量')),
                ('usetype', models.CharField(max_length=100, null=True, verbose_name='应用用途')),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=300, null=True)),
                ('assettype', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assettype_equipment', to='cmdb.BaseEquipmentType')),
                ('cabinet', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseAssetCabinet')),
                ('cust', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cust_equipment', to='cmdb.BaseCustomerInfo', to_field='idcode')),
                ('factory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseFactory')),
                ('netarea', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseNetArea')),
                ('room', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='room_equipment', to='cmdb.BaseMachineRoom')),
                ('status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseAssetStatus')),
            ],
            options={
                'ordering': ['-createdate'],
                'permissions': (('view_equipment', 'Can View Equipment'),),
            },
        ),
        migrations.CreateModel(
            name='EquipmentBoardCard',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('assetno', models.CharField(max_length=100)),
                ('sn', models.CharField(max_length=100, null=True, verbose_name='设备编号')),
                ('cardname', models.CharField(max_length=100, verbose_name='板卡名')),
                ('slot', models.CharField(max_length=100, null=True, verbose_name='槽位号')),
                ('model', models.CharField(max_length=100, null=True, verbose_name='型号')),
                ('createuser', models.CharField(max_length=100, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_card', to='cmdb.Equipment', verbose_name='关联设备')),
            ],
        ),
        migrations.CreateModel(
            name='IDS',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tablename', models.CharField(max_length=100, unique=True)),
                ('nextid', models.BigIntegerField()),
            ],
            options={
                'permissions': (('view_ids', 'can view ids'),),
            },
        ),
        migrations.CreateModel(
            name='InstalledSoftList',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('port', models.CharField(blank=True, max_length=200, null=True)),
                ('createuser', models.CharField(max_length=100, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IPAllocation',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('ipcount', models.IntegerField()),
                ('iplist', models.CharField(max_length=200, null=True)),
                ('remark', models.CharField(max_length=200, null=True)),
            ],
            options={
                'permissions': (('view_ipallocation', 'Can View IPAllocation'),),
            },
        ),
        migrations.CreateModel(
            name='IPConfiguration',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('ipaddress', models.GenericIPAddressField(null=True)),
                ('gatway', models.GenericIPAddressField(null=True)),
                ('iptype', models.CharField(blank=True, max_length=100, null=True)),
                ('domain', models.CharField(blank=True, max_length=100, null=True)),
                ('vlan', models.CharField(blank=True, max_length=100, null=True)),
                ('createuser', models.CharField(max_length=100, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='IPSource',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('startip', models.GenericIPAddressField()),
                ('endip', models.GenericIPAddressField()),
                ('gatway', models.GenericIPAddressField()),
                ('counts', models.IntegerField()),
                ('usedcount', models.IntegerField(default=0)),
                ('remark', models.CharField(blank=True, max_length=200, null=True)),
                ('netarea', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseNetArea')),
            ],
            options={
                'permissions': (('view_ipsource', 'Can View IPSource'),),
            },
        ),
        migrations.CreateModel(
            name='OperateAudit',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('operatetime', models.DateTimeField(auto_now=True, verbose_name='操作时间')),
                ('operater', models.CharField(max_length=100, null=True, verbose_name='操作人')),
                ('action', models.CharField(max_length=100, null=True, verbose_name='动作')),
                ('modelname', models.CharField(max_length=100, null=True, verbose_name='操作表')),
                ('operatedata', models.CharField(max_length=300, null=True, verbose_name='操作数据')),
            ],
            options={
                'verbose_name_plural': '审计',
                'permissions': (('view_operateaudit', 'can view OperateAudit'),),
                'verbose_name': '审计',
            },
        ),
        migrations.CreateModel(
            name='PortList',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('object_pk', models.BigIntegerField(verbose_name='设备板卡ID')),
                ('portname', models.CharField(max_length=100, verbose_name='端口名')),
                ('porttype', models.CharField(max_length=100, null=True, verbose_name='端口类型')),
                ('flag', models.IntegerField(choices=[(1, '服务器板卡'), (2, '网络设备板卡')], default=2, verbose_name='设备类型')),
                ('vlan', models.CharField(max_length=20, null=True, verbose_name='VLAN')),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='PortMapping',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
                ('localport', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_local', to='cmdb.PortList', verbose_name='本地端口')),
                ('targetport', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_target', to='cmdb.PortList', verbose_name='对端端口')),
            ],
        ),
        migrations.CreateModel(
            name='Projects',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('sysname', models.CharField(max_length=100, verbose_name='项目名称')),
                ('sysalias', models.CharField(blank=True, max_length=50, null=True, verbose_name='项目简称')),
                ('syslevel', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=10, null=True, verbose_name='系统等级')),
                ('disasterlevel', models.CharField(blank=True, choices=[('1', '1'), ('2', '2'), ('3', '3'), ('4', '4'), ('5', '5')], max_length=10, null=True, verbose_name='灾备等级')),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseCompany', verbose_name='所属公司')),
                ('cust', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseCustomerInfo', to_field='idcode', verbose_name='所属客户')),
            ],
            options={
                'verbose_name_plural': '项目信息',
                'permissions': (('view_projects', 'Can View Projects'),),
                'ordering': ['sysname', 'sysalias', 'company', 'syslevel', 'cust'],
                'verbose_name': '项目信息',
            },
        ),
        migrations.CreateModel(
            name='R_Equipment_Staff',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=100, null=True)),
                ('equipment', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_staffs', to='cmdb.Equipment')),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseRole')),
            ],
        ),
        migrations.CreateModel(
            name='R_MachineRoom_Staff',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('remark', models.CharField(max_length=100, null=True)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseRole')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_staffs', to='cmdb.BaseMachineRoom')),
            ],
        ),
        migrations.CreateModel(
            name='R_Project_Staff',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_staffs', to='cmdb.Projects')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseRole')),
            ],
            options={
                'ordering': ['project'],
            },
        ),
        migrations.CreateModel(
            name='R_Server_Business',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('business', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_servers', to='cmdb.Business')),
            ],
        ),
        migrations.CreateModel(
            name='R_Server_Staff',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200)),
                ('role', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseRole')),
            ],
        ),
        migrations.CreateModel(
            name='ServerBoardCard',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('assetno', models.CharField(max_length=100, unique=True)),
                ('sn', models.CharField(max_length=100, null=True, unique=True, verbose_name='设备编号')),
                ('model', models.CharField(max_length=100, null=True, verbose_name='型号')),
                ('cardtype', models.IntegerField(choices=[(1, '网卡'), (2, '存储卡')], default=1, verbose_name='类型')),
                ('mac', models.CharField(max_length=100, null=True, verbose_name='MAC/WWW')),
                ('slot', models.CharField(max_length=50, null=True, verbose_name='槽位号')),
                ('createuser', models.CharField(max_length=50, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
                ('factory', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseFactory', verbose_name='厂商')),
            ],
        ),
        migrations.CreateModel(
            name='Servers',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('hostname', models.CharField(max_length=200)),
                ('tradedate', models.DateField(blank=True, null=True)),
                ('expiredate', models.DateField(blank=True, null=True)),
                ('model', models.CharField(max_length=100, null=True)),
                ('partition', models.CharField(max_length=100, null=True, verbose_name='分区名')),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(blank=True, max_length=200, null=True)),
                ('balancetype', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_balance', to='cmdb.BaseBalanceType')),
                ('cust', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cust_server', to='cmdb.BaseCustomerInfo', to_field='idcode')),
                ('netarea', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='area_server', to='cmdb.BaseNetArea')),
                ('ownserver', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='related_asset', to='cmdb.Assets')),
                ('runningstatus', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='run_status', to='cmdb.BaseRunningStatus')),
                ('type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='server', to='cmdb.BaseAssetType')),
            ],
            options={
                'ordering': ['-createdate'],
                'permissions': (('view_servers', 'Can View Servers'),),
            },
        ),
        migrations.CreateModel(
            name='SoftLisence',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('lisence', models.CharField(blank=True, max_length=100, null=True, verbose_name='Lisene号')),
                ('tradedate', models.DateField(blank=True, null=True, verbose_name='购买日期')),
                ('expiredate', models.DateField(blank=True, null=True, verbose_name='过期日期')),
                ('remark', models.CharField(blank=True, max_length=300, null=True, verbose_name='备注')),
                ('soft', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softlisence', to='cmdb.BaseSoft', verbose_name='软件名称')),
            ],
            options={
                'verbose_name_plural': '软件Lisence',
                'permissions': (('view_softlisence', 'can view SoftLisence'),),
                'ordering': ['soft', 'tradedate'],
                'verbose_name': '软件Lisence',
            },
        ),
        migrations.CreateModel(
            name='Staffs',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, verbose_name='姓名')),
                ('alias', models.CharField(max_length=50, verbose_name='简称')),
                ('mobile', models.CharField(blank=True, max_length=20, null=True, verbose_name='手机')),
                ('tel', models.CharField(blank=True, max_length=20, null=True, verbose_name='座机')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='邮箱')),
                ('remark', models.CharField(blank=True, max_length=300, null=True, verbose_name='备注')),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='company_staffs', to='cmdb.BaseCompany', verbose_name='所属公司')),
            ],
            options={
                'verbose_name_plural': '联系人',
                'permissions': (('view_staffs', 'Can View Staffs'),),
                'ordering': ['name', 'alias', 'mobile'],
                'verbose_name': '联系人',
            },
        ),
        migrations.CreateModel(
            name='StorageLV',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('lvname', models.CharField(max_length=100, verbose_name='LV/LUN名称')),
                ('lvsize', models.CharField(max_length=100, verbose_name='LV/LUN大小')),
                ('filesystem', models.CharField(max_length=200, null=True, verbose_name='主机PV/FS')),
                ('createuser', models.CharField(max_length=100)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='StoragePV',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('pvname', models.CharField(max_length=100, verbose_name='PV名称')),
                ('pvsize', models.CharField(max_length=50, verbose_name='pv大小')),
                ('createuser', models.CharField(max_length=100, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
            ],
        ),
        migrations.CreateModel(
            name='StorageVG',
            fields=[
                ('id', models.BigIntegerField(primary_key=True, serialize=False)),
                ('vgname', models.CharField(max_length=200, verbose_name='VG/Pool名称')),
                ('vgsize', models.CharField(max_length=100, verbose_name='VG大小')),
                ('createuser', models.CharField(max_length=100, null=True)),
                ('createdate', models.DateTimeField(auto_now_add=True)),
                ('updateuser', models.CharField(max_length=100, null=True)),
                ('updatedate', models.DateTimeField(auto_now=True)),
                ('remark', models.CharField(max_length=200, null=True, verbose_name='备注')),
                ('raidtype', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseRaidType', verbose_name='RAID类型')),
                ('server', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_vg', to='cmdb.Servers', verbose_name='所属主机')),
            ],
        ),
        migrations.AddField(
            model_name='storagepv',
            name='vg',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='related_pv', to='cmdb.StorageVG', verbose_name='所属VG'),
        ),
        migrations.AddField(
            model_name='storagelv',
            name='vg',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_lv', to='cmdb.StorageVG', verbose_name='所属VG'),
        ),
        migrations.AddField(
            model_name='serverboardcard',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_card', to='cmdb.Servers', verbose_name='所属主机'),
        ),
        migrations.AddField(
            model_name='r_server_staff',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_staffs', to='cmdb.Servers'),
        ),
        migrations.AddField(
            model_name='r_server_staff',
            name='staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.Staffs'),
        ),
        migrations.AddField(
            model_name='r_server_business',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_business', to='cmdb.Servers'),
        ),
        migrations.AddField(
            model_name='r_project_staff',
            name='staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.Staffs'),
        ),
        migrations.AddField(
            model_name='r_machineroom_staff',
            name='staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.Staffs'),
        ),
        migrations.AddField(
            model_name='r_equipment_staff',
            name='staff',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.Staffs'),
        ),
        migrations.AddField(
            model_name='ipconfiguration',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_ip', to='cmdb.Servers'),
        ),
        migrations.AddField(
            model_name='ipallocation',
            name='ipsoure',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocation', to='cmdb.IPSource'),
        ),
        migrations.AddField(
            model_name='ipallocation',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='allocation', to='cmdb.Projects'),
        ),
        migrations.AddField(
            model_name='installedsoftlist',
            name='lisence',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.SoftLisence'),
        ),
        migrations.AddField(
            model_name='installedsoftlist',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_soft', to='cmdb.Servers'),
        ),
        migrations.AddField(
            model_name='installedsoftlist',
            name='soft',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseSoft'),
        ),
        migrations.AddField(
            model_name='cpumemory',
            name='server',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='server_cpu', to='cmdb.Servers'),
        ),
        migrations.AddField(
            model_name='business',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_business', to='cmdb.Projects', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='basesoft',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='softlist', to='cmdb.BaseSoftType', verbose_name='软件类型'),
        ),
        migrations.AddField(
            model_name='baseassetsubtype',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cmdb.BaseAssetType', verbose_name='所属分类'),
        ),
        migrations.AddField(
            model_name='baseassetcabinet',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseMachineRoom', verbose_name='所属机房'),
        ),
        migrations.AddField(
            model_name='assets',
            name='assetstatus',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_status', to='cmdb.BaseAssetStatus'),
        ),
        migrations.AddField(
            model_name='assets',
            name='assettype',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cmdb.BaseAssetSubtype', verbose_name='设备类型'),
        ),
        migrations.AddField(
            model_name='assets',
            name='cabinet',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_cabinet', to='cmdb.BaseAssetCabinet', verbose_name='机柜'),
        ),
        migrations.AddField(
            model_name='assets',
            name='cust',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_cust', to='cmdb.BaseCustomerInfo', to_field='idcode'),
        ),
        migrations.AddField(
            model_name='assets',
            name='factory',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_factory', to='cmdb.BaseFactory', verbose_name='厂商'),
        ),
        migrations.AddField(
            model_name='assets',
            name='integrator',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_integrator', to='cmdb.BaseFactory', verbose_name='集成商'),
        ),
        migrations.AddField(
            model_name='assets',
            name='netarea',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_area', to='cmdb.BaseNetArea', verbose_name='网络区域'),
        ),
        migrations.AddField(
            model_name='assets',
            name='room',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_room', to='cmdb.BaseMachineRoom', verbose_name='机房'),
        ),
        migrations.AddField(
            model_name='assets',
            name='usetype',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='asset_type', to='cmdb.BaseAssetType', verbose_name='用途属性'),
        ),
    ]
